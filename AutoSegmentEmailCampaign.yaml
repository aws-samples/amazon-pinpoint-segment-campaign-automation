# author: pavlosik@
---
AWSTemplateFormatVersion: 2010-09-09
Description: Amazon Pinpoint Segment Email Campaign Creation

Parameters:

  PinpointProjectId:
    Type: String
    Description: Amazon Pinpoint Project ID
  EmailFromAddress:
    Type: String
    Description: Type the email that you would like the campaign email to be sent from. This email address needs to be validated first.

Resources:

  PinpointSegmentCreate:
    Type: AWS::Lambda::Function
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: Not public facing.
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt PinpointSegmentCampaignCreateDeleteRole.Arn
      Runtime: python3.8
      Timeout: 60
      Environment:
        Variables:
          LOG_LEVEL: "INFO"
          PINPOINT_PROJECT_ID: !Ref PinpointProjectId
      ReservedConcurrentExecutions: 3
      Code:
        ZipFile: |
          import boto3
          import os
          import logging
          client = boto3.client("pinpoint")
          appid = os.environ.get("PINPOINT_PROJECT_ID")
          def lambda_handler(event, context):
            interest = event["interest"]
            product_name = event["product_name"]
            product_link = event["product_link"]
            segment_name = "segment" + "_" + interest + "_" + product_name
            global log_level
            log_level = str(os.environ.get("LOG_LEVEL")).upper()
            if log_level not in [
                                      "DEBUG", "INFO",
                                      "WARNING", "ERROR",
                                      "CRITICAL"
                                  ]:
              log_level = "ERROR"
            logging.getLogger().setLevel(log_level)
            logging.info(event)            
            response = client.create_segment(
            ApplicationId=appid,
            WriteSegmentRequest={
                "Dimensions": {
                    "UserAttributes": {
                        "interests": {
                            "AttributeType": "CONTAINS",
                            "Values": [
                                interest,
                            ]
                        }
                    },
                    "Behavior": {
                        "Recency": {
                            "Duration": "DAY_30",
                            "RecencyType": "ACTIVE"
                        }
                    }
                    },
                "Name" : segment_name
            })
            logging.info(response)
            return {
              "SegmentId": response["SegmentResponse"]["Id"],
              "product_name": product_name,
              "interest": interest,
              "product_link": product_link
            } 

  PinpointSegmentStatus:
    Type: AWS::Lambda::Function
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: Not public facing.
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt PinpointSegmentCampaignStatusRole.Arn
      Runtime: python3.8
      Timeout: 60
      Environment:
        Variables:
          LOG_LEVEL: "INFO"
          PINPOINT_PROJECT_ID: !Ref PinpointProjectId
      ReservedConcurrentExecutions: 3
      Code:
        ZipFile: |
          import boto3
          import os
          import logging
          client = boto3.client("pinpoint")
          def lambda_handler(event, context):
            interest = event["interest"]
            product_name = event["product_name"]
            product_link = event["product_link"]
            segmentid = event["SegmentId"]
            global log_level
            log_level = str(os.environ.get("LOG_LEVEL")).upper()
            if log_level not in [
                                      "DEBUG", "INFO",
                                      "WARNING", "ERROR",
                                      "CRITICAL"
                                  ]:
              log_level = "ERROR"
            logging.getLogger().setLevel(log_level)
            logging.info(event)

            try:
              response = client.get_segment(
                ApplicationId=os.environ.get("PINPOINT_PROJECT_ID"),
                SegmentId=event["SegmentId"]
              )
              segment_id = response["SegmentResponse"]["Id"]
              segment_status = "COMPLETED"
              db_logging_status = "SEGMENT_SUCCESS"
              logging.info(response)
            except Exception as e:
              print(e)
              segment_id = "NA"
              segment_status = "INVALID"
              db_logging_status = "SEGMENT_FAILED"   
            
            return {
              "SegmentId": segment_id,
              "SegmentStatus": segment_status,
              "product_name": product_name,
              "interest": interest,
              "product_link": product_link,
              "db_logging_status": db_logging_status
            } 

  PinpointCampaignCreate:
    Type: AWS::Lambda::Function
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: Not public facing.
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt PinpointSegmentCampaignCreateDeleteRole.Arn
      Runtime: python3.8
      Timeout: 60
      Environment:
        Variables:
          LOG_LEVEL: "INFO"
          PINPOINT_PROJECT_ID: !Ref PinpointProjectId
          FROM_ADDRESS: !Ref EmailFromAddress
      ReservedConcurrentExecutions: 3
      Code:
        ZipFile: |
          import boto3
          import os
          import logging
          client = boto3.client("pinpoint")
          def lambda_handler(event, context):
            interest = event["interest"]
            segment_id = event["SegmentId"]
            product_name = event["product_name"]
            product_link = event["product_link"]
            formatted_prod_link = """ + product_link + """
            from_email = os.environ.get("FROM_ADDRESS")
            campaign_name = "campaign" + "_" + interest + "_" + product_name
            appid = os.environ.get("PINPOINT_PROJECT_ID")
            global log_level
            log_level = str(os.environ.get("LOG_LEVEL")).upper()
            if log_level not in [
                                      "DEBUG", "INFO",
                                      "WARNING", "ERROR",
                                      "CRITICAL"
                                  ]:
              log_level = "ERROR"
            logging.getLogger().setLevel(log_level)
            logging.info(event)

            response = client.create_campaign(
                ApplicationId=appid,
                WriteCampaignRequest={
                    "MessageConfiguration": {
                        "EmailMessage": {
                          "Body":"Hello we have a new product arrival that you might be interested in.",
                          "FromAddress": from_email,
                          "HtmlBody": """<html>
                          <head></head>
                          <body>
                            <h1> Hello, are you interested in """ + interest + """? </h1>
                            <p> There is a new product arrival: """ + product_name + """ </p>
                            <a href=""" + formatted_prod_link + """>Click here to view """ + product_name + """ on our website!</a>
                            <p> Hope to see you back soon! </p>
                          </body>
                          </html>
                          """,
                        "Title": "New Product Arrival: " + product_name
                        }},
                    "Name": campaign_name,
                    "Schedule": {
                        "Frequency": "ONCE",
                        "IsLocalTime": False, 
                        "StartTime": "IMMEDIATE",
                        "Timezone": "UTC+01"
                    },
                    "SegmentId": segment_id
                    })

            logging.info(response)
            return {
              "CampaignId": response["CampaignResponse"]["Id"],
              "SegmentId": response["CampaignResponse"]["SegmentId"],
              "CampaignStatus": response["CampaignResponse"]["State"]["CampaignStatus"],
              "interest": event["interest"],
              "product_name": event["product_name"],
              "product_link": event["product_link"]
            }

  PinpointCampaignCampaignStatus:
    Type: AWS::Lambda::Function
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: Not public facing.
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt PinpointSegmentCampaignStatusRole.Arn
      Runtime: python3.8
      Timeout: 60
      Environment:
        Variables:
          LOG_LEVEL: "INFO"
          PINPOINT_PROJECT_ID: !Ref PinpointProjectId
      ReservedConcurrentExecutions: 3
      Code:
        ZipFile: |
          import boto3
          import os
          import logging
          client = boto3.client("pinpoint")
          def lambda_handler(event, context):
            global log_level
            log_level = str(os.environ.get("LOG_LEVEL")).upper()
            if log_level not in [
                                      "DEBUG", "INFO",
                                      "WARNING", "ERROR",
                                      "CRITICAL"
                                  ]:
              log_level = "ERROR"
            logging.getLogger().setLevel(log_level)
            logging.info(event)
            response = client.get_campaign_activities(
              ApplicationId=os.environ.get("PINPOINT_PROJECT_ID"),
              CampaignId=event["CampaignId"]
            )
            logging.info(response)
            activity = response["ActivitiesResponse"]["Item"][0]
            if activity["State"] == "COMPLETED":
              end = activity["End"]
              start = activity["Start"]
              successendpoints = activity["SuccessfulEndpointCount"]
              totalendpoints = activity["TotalEndpointCount"]
            else:
              end = "NA"
              start = "NA"
              successendpoints = "NA"
              totalendpoints = "NA"

            return {
              "SegmentId" : event["SegmentId"],
              "CampaignId": activity["CampaignId"],
              "CampaignStatus": activity["State"],
              "Start": start,
              "End": end,
              "SuccessfulEndpointCount": successendpoints,
              "TotalEndpointCount": totalendpoints,
              "interest": event["interest"],
              "product_name": event["product_name"],
              "product_link": event["product_link"],
            }

  PinpointDeleteCampaignSegment:
    Type: AWS::Lambda::Function
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: Not public facing.
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt PinpointSegmentCampaignCreateDeleteRole.Arn
      Runtime: python3.8
      Timeout: 60
      Environment:
        Variables:
          LOG_LEVEL: "INFO"
          PINPOINT_PROJECT_ID: !Ref PinpointProjectId
      ReservedConcurrentExecutions: 3
      Code:
        ZipFile: |
          import boto3
          import os
          import logging
          import time
          client = boto3.client("pinpoint")
          def lambda_handler(event, context):
            global log_level
            log_level = str(os.environ.get("LOG_LEVEL")).upper()
            if log_level not in [
                                      "DEBUG", "INFO",
                                      "WARNING", "ERROR",
                                      "CRITICAL"
                                  ]:
              log_level = "ERROR"
            logging.getLogger().setLevel(log_level)
            logging.info(event)
            response = client.delete_campaign(
              ApplicationId=os.environ.get("PINPOINT_PROJECT_ID"),
              CampaignId=event["CampaignId"]
              )
            logging.info(response)
            time.sleep(3)

            response = client.delete_segment(
                ApplicationId=os.environ.get("PINPOINT_PROJECT_ID"),
                SegmentId=event["SegmentId"]
            )
            logging.info(response)   
            db_logging_status = "SEGMENT_CAMPAIGN_SUCCESS"

            return {
              "SegmentId" : event["SegmentId"],
              "CampaignId": event["CampaignId"],
              "CampaignStatus": event["CampaignStatus"],
              "Start": event["Start"],
              "End": event["End"],
              "TotalEndpointCount": event["TotalEndpointCount"],
              "SuccessfulEndpointCount": event["SuccessfulEndpointCount"],
              "interest": event["interest"],
              "product_name": event["product_name"],
              "product_link": event["product_link"],
              "db_logging_status": db_logging_status
            }

  PinpointDeleteSegment:
    Type: AWS::Lambda::Function
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: Not public facing.
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt PinpointSegmentCampaignCreateDeleteRole.Arn
      Runtime: python3.8
      Timeout: 60
      Environment:
        Variables:
          LOG_LEVEL: "INFO"
          PINPOINT_PROJECT_ID: !Ref PinpointProjectId
      ReservedConcurrentExecutions: 3
      Code:
        ZipFile: |
          import boto3
          import os
          import logging
          import time
          client = boto3.client("pinpoint")
          def lambda_handler(event, context):
            global log_level
            log_level = str(os.environ.get("LOG_LEVEL")).upper()
            if log_level not in [
                                      "DEBUG", "INFO",
                                      "WARNING", "ERROR",
                                      "CRITICAL"
                                  ]:
              log_level = "ERROR"
            logging.getLogger().setLevel(log_level)
            logging.info(event)

            response = client.delete_segment(
                ApplicationId=os.environ.get("PINPOINT_PROJECT_ID"),
                SegmentId=event["SegmentId"]
            )
            logging.info(response)   
            db_logging_status = "CAMPAIGN_FAILED"           

            return {
              "SegmentId" : event["SegmentId"],
              "interest": event["interest"],
              "CampaignStatus":event["CampaignStatus"],
              "product_name": event["product_name"],
              "product_link": event["product_link"],
              "db_logging_status": db_logging_status
            }
  
  PinpointDynamoDBLogging:
    Type: AWS::Lambda::Function
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: Not public facing.
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt LoggingLambdaRole.Arn
      Runtime: python3.8
      Timeout: 60
      Environment:
        Variables:
          LOG_LEVEL: "INFO"
          TABLE_NAME: !Select [1, !Split ['/', !GetAtt LoggingDynamoDBTable.Arn]] 
      ReservedConcurrentExecutions: 3
      Code:
        ZipFile: |
          import boto3
          import os
          import logging
          import datetime

          region = os.environ["AWS_REGION"]
          dynamodbendpointurl = "https://dynamodb." + region + ".amazonaws.com"
          dynamodb = boto3.resource("dynamodb", endpoint_url=dynamodbendpointurl)
          table = dynamodb.Table(os.environ["TABLE_NAME"])

          def lambda_handler(event, context):
            global log_level
            log_level = str(os.environ.get("LOG_LEVEL")).upper()
            if log_level not in [
                                      "DEBUG", "INFO",
                                      "WARNING", "ERROR",
                                      "CRITICAL"
                                  ]:
              log_level = "ERROR"
            logging.getLogger().setLevel(log_level)
            logging.info(event)

            time_stamp = datetime.datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
            OutputDate = event["db_logging_status"] + "_" + event["product_name"] + "_" + time_stamp

            if event["db_logging_status"] == "SEGMENT_FAILED":
              response=table.put_item(
                Item={
                  "OutputDate": OutputDate,
                  "interest": event["interest"],
                  "product_name": event["product_name"],
                  "product_link": event["product_link"]
                }
              )
              SegmentId = "NA"
              CampaignStatus = "NA"
              CampaignId = "NA"
              Start = "NA"
              End = "NA"
              TotalEndpointCount = "NA"
              SuccessfulEndpointCount = "NA"
            elif event["db_logging_status"] == "CAMPAIGN_FAILED":
              response=table.put_item(
                Item={
                  "OutputDate": OutputDate,
                  "interest": event["interest"],
                  "product_name": event["product_name"],
                  "product_link": event["product_link"],
                  "SegmentId" : event["SegmentId"],
                  "CampaignStatus":event["CampaignStatus"],
                }
              )
              SegmentId =  event["SegmentId"]
              CampaignStatus = event["CampaignStatus"]
              CampaignId = "NA"
              Start = "NA"
              End = "NA"
              TotalEndpointCount = "NA"
              SuccessfulEndpointCount = "NA"
            elif event["db_logging_status"] == "SEGMENT_CAMPAIGN_SUCCESS":
              response=table.put_item(
                Item={
                  "OutputDate": OutputDate,
                  "SegmentId" : event["SegmentId"],
                  "interest": event["interest"],
                  "product_name": event["product_name"],
                  "product_link": event["product_link"],
                  "CampaignStatus": event["CampaignStatus"],
                  "CampaignId": event["CampaignId"],
                  "Start": event["Start"],
                  "End": event["End"],
                  "TotalEndpointCount": event["TotalEndpointCount"],
                  "SuccessfulEndpointCount": event["SuccessfulEndpointCount"]
                }
              )
              SegmentId =  event["SegmentId"]
              CampaignStatus = event["CampaignStatus"]
              CampaignId = event["CampaignId"]
              Start = event["Start"]
              End = event["End"]
              TotalEndpointCount = event["TotalEndpointCount"]
              SuccessfulEndpointCount = event["SuccessfulEndpointCount"]

            logging.info(response)
            return {
              "SegmentId" : event["SegmentId"],
              "interest": event["interest"],
              "product_name": event["product_name"],
              "product_link": event["product_link"],
              "CampaignStatus": CampaignStatus,
              "CampaignId": CampaignId,
              "Start": Start,
              "End": End,
              "TotalEndpointCount": TotalEndpointCount,
              "SuccessfulEndpointCount": SuccessfulEndpointCount
            }

  PinpointCampaignNotificationTopic:
    Type: AWS::SNS::Topic
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W47
            reason: Not required.
    Properties:
      DisplayName: "PinpointCreateCampaignNotifications"

  SegmentCampaignStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn: !GetAtt StateMachineRole.Arn
      DefinitionString:
        !Sub
          - |-
            {
              "StartAt": "CreateSegment",
              "States": {
                "CreateSegment": {
                  "Type": "Task",
                  "Resource": "${PinpointSegmentCreateArn}",
                  "Next": "SegmentWait"
                },
                "SegmentWait": {
                  "Type": "Wait",
                  "Seconds": 5,
                  "Next": "SegmentStatus"
                },
                "SegmentStatus": {
                  "Type": "Task",
                  "Resource": "${PinpointSegmentStatusArn}",
                  "Next": "IsSegmentFinished"
                },
                "IsSegmentFinished": {
                  "Type": "Choice",
                  "Default": "SegmentWait",
                  "Choices": [
                    {
                      "Variable": "$.SegmentStatus",
                      "StringEquals": "FAILED",
                      "Next": "SegmentFailed"
                    },
                    {
                      "Variable": "$.SegmentStatus",
                      "StringEquals": "COMPLETED",
                      "Next": "SegmentSuccess"
                    }
                  ]
                },             
                "SegmentSuccess": {
                  "Type": "Pass",
                  "Parameters": {
                    "SegmentId.$": "$.SegmentId",
                    "SegmentStatus.$": "$.SegmentStatus",
                    "product_name.$": "$.product_name",
                    "interest.$": "$.interest",
                    "product_link.$": "$.product_link"
                  },
                  "Next": "CreateCampaign"
                },
                "CreateCampaign": {
                  "Type": "Task",
                  "Resource": "${PinpointCampaignCreateArn}",
                  "Next": "CampaignWait"
                },
                "CampaignWait": {
                  "Type": "Wait",
                  "Seconds": 5,
                  "Next": "CampaignStatus"
                },
                "CampaignStatus": {
                  "Type": "Task",
                  "Resource": "${PinpointCampaignCampaignStatusArn}",
                  "Next": "IsCampaignFinished"
                },
                "IsCampaignFinished": {
                  "Type": "Choice",
                  "Default": "CampaignWait",
                  "Choices": [
                    {
                      "Variable": "$.CampaignStatus",
                      "StringEquals": "INVALID",
                      "Next": "DeleteSegment"
                    },
                    {
                      "Variable": "$.CampaignStatus",
                      "StringEquals": "COMPLETED",
                      "Next": "CampaignSuccess"
                    }
                  ]
                },
                "CampaignSuccess": {
                  "Type": "Pass",
                  "Parameters": {
                    "SegmentId.$": "$.SegmentId",
                    "CampaignId.$": "$.CampaignId",
                    "CampaignStatus.$": "$.CampaignStatus",
                    "Start.$": "$.Start",
                    "End.$": "$.End",
                    "SuccessfulEndpointCount.$": "$.SuccessfulEndpointCount",
                    "TotalEndpointCount.$": "$.TotalEndpointCount",
                    "interest.$": "$.interest",
                    "product_name.$": "$.product_name",
                    "product_link.$": "$.product_link"
                  },
                  "Next": "DeleteCampaignSegment"
                },
                "DeleteCampaignSegment": {
                  "Type": "Task",
                  "Resource": "${PinpointDeleteCampaignSegmentArn}",
                  "Next": "EmitSuccess"
                },
                "EmitSuccess": {
                  "Type": "Task",
                  "Resource": "arn:aws:states:::sns:publish",
                  "ResultPath": null,
                  "Parameters": {
                    "TopicArn": "${SNSTopicArn}",
                    "Message": {
                      "Message": "Campaign Create Successful",
                      "CampaignCreateResult.$": "$"
                    },
                    "Subject": "Amazon Pinpoint Campaign Create Successful",
                    "MessageAttributes": {
                      "notification_type": {
                        "DataType": "String",
                        "StringValue": "success"
                      }
                    }
                  },
                  "Next": "Logging"
                },
                "Logging": {
                  "Type": "Task",
                  "Resource": "${PinpointDynamoDBLoggingArn}",
                  "End": true                
                },
                "SegmentFailed": {
                  "Type": "Task",
                  "Resource": "arn:aws:states:::sns:publish",
                  "Parameters": {
                    "TopicArn": "${SNSTopicArn}",
                    "Message": {
                      "Message": "Segment Create Failed"
                    },
                    "Subject": "Amazon Pinpoint Campaign Create Failed",
                    "MessageAttributes": {
                        "notification_type": {
                            "DataType": "String",
                            "StringValue": "failure"
                        }
                    }
                  },
                  "Next": "Logging"
                },
                "DeleteSegment": {
                  "Type": "Task",
                  "Resource": "${PinpointDeleteSegmentArn}",
                  "Next": "CampaignFailed"
                },
                "CampaignFailed": {
                  "Type": "Task",
                  "Resource": "arn:aws:states:::sns:publish",
                  "Parameters": {
                    "TopicArn": "${SNSTopicArn}",
                    "Message": {
                      "Message": "Campaign Create Failed",
                      "CampaignCreateResult.$": "$"
                    },
                    "Subject": "Amazon Pinpoint Campaign Create Failed",
                    "MessageAttributes": {
                        "notification_type": {
                            "DataType": "String",
                            "StringValue": "failure"
                        }
                    }
                  },
                  "Next": "Logging"
                }
              }
            }
          - {PinpointDynamoDBLoggingArn: !GetAtt PinpointDynamoDBLogging.Arn, PinpointDeleteSegmentArn: !GetAtt PinpointDeleteSegment.Arn, PinpointDeleteCampaignSegmentArn: !GetAtt PinpointDeleteCampaignSegment.Arn, PinpointSegmentStatusArn: !GetAtt PinpointSegmentStatus.Arn, PinpointSegmentCreateArn: !GetAtt PinpointSegmentCreate.Arn, PinpointCampaignCreateArn: !GetAtt PinpointCampaignCreate.Arn, PinpointCampaignCampaignStatusArn: !GetAtt PinpointCampaignCampaignStatus.Arn, SNSTopicArn: !Ref PinpointCampaignNotificationTopic}

  PinpointSegmentCampaignCreateDeleteRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        -
          PolicyName: "root"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
              -
                Effect: "Allow"
                Action:
                  - "mobiletargeting:CreateCampaign"
                  - "mobiletargeting:DeleteCampaign"
                  - "mobiletargeting:CreateSegment"
                  - "mobiletargeting:DeleteSegment"
                Resource:
                  - !Sub "arn:aws:mobiletargeting:${AWS::Region}:${AWS::AccountId}:*"

  PinpointSegmentCampaignStatusRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        -
          PolicyName: "root"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
              -
                Effect: "Allow"
                Action:
                  - "mobiletargeting:GetCampaignActivities"
                  - "mobiletargeting:GetSegment"
                Resource:
                  - !Sub "arn:aws:mobiletargeting:${AWS::Region}:${AWS::AccountId}:*"

  StateMachineRole:
    Type: AWS::IAM::Role
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W76
            reason: Complex Role that is used for StateMachine to invoke many other lambdas
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "states.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        -
          PolicyName: "root"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action: "lambda:InvokeFunction"
                Resource:
                  - !GetAtt PinpointCampaignCreate.Arn
                  - !GetAtt PinpointCampaignCampaignStatus.Arn
                  - !GetAtt PinpointSegmentCreate.Arn
                  - !GetAtt PinpointSegmentStatus.Arn
                  - !GetAtt PinpointDeleteCampaignSegment.Arn
                  - !GetAtt PinpointDeleteSegment.Arn
                  - !GetAtt PinpointDynamoDBLogging.Arn
              -
                Effect: "Allow"
                Action:  sns:Publish
                Resource: !Ref PinpointCampaignNotificationTopic

#### DYNAMO DB TABLES
##################################

  LoggingDynamoDBTable:
    Type: AWS::DynamoDB::Table
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Properties: 
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions: 
      - AttributeName: OutputDate
        AttributeType: S
      KeySchema: 
      - AttributeName: OutputDate
        KeyType: HASH
      PointInTimeRecoverySpecification:  
        PointInTimeRecoveryEnabled: true
      SSESpecification:
        SSEEnabled: true

  LoggingLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        -
          PolicyName: "root"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - 
                Effect: "Allow"
                Action:
                  - "dynamodb:PutItem"
                Resource: !GetAtt LoggingDynamoDBTable.Arn
              - 
                Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"

Outputs:
  SegmentCampaignStateMachineArn:
    Description: The Segment Campaign Create State Machine ARN
    Value: !Ref SegmentCampaignStateMachine
